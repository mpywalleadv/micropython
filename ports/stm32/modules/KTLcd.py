import machine
from ssd1306 import SSD1306_I2C

# Subclassing SSD1306_I2C provides support for graphics primitives
# SSD1306_I2C is a subclass of FrameBuf
# http://docs.micropython.orgSSD1306_I2C/en/latest/pyboard/library/framebuf.html
class KTLcd(SSD1306_I2C):
    smile = [[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x02,0x02,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x04,0x04,0x08,0x08,0x10,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
             [0x00,0x00,0xC0,0x30,0x0C,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x0C,0x30,0xC0,0x00,0x00],
             [0xF8,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x09,0x09,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x09,0x09,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0],
             [0x1F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x0F],
             [0x00,0x00,0x03,0x0C,0x30,0x40,0x80,0x00,0x00,0x00,0x01,0x02,0x04,0x04,0x08,0x08,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x08,0x08,0x04,0x04,0x02,0x01,0x00,0x00,0x00,0x80,0x40,0x30,0x0C,0x03,0x00,0x00],
             [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x04,0x08,0x08,0x10,0x10,0x20,0x20,0x40,0x40,0x40,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x40,0x40,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00]]
                      
    normal = [[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x04,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x04,0x04,0x04,0x08,0x08,0x08,0x10,0x20,0x20,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
              [0x00,0x00,0xC0,0x20,0x18,0x04,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x04,0x18,0x20,0xC0,0x00,0x00],
              [0xF0,0x0E,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x09,0x09,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x09,0x09,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x0E,0xF0],
              [0x1F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x1F],
              [0x00,0x01,0x06,0x08,0x30,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x20,0x18,0x07,0x00,0x00],
              [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x04,0x08,0x08,0x10,0x10,0x20,0x20,0x40,0x40,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x40,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00]]

    cry = [[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x40,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x02,0x02,0x02,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x02,0x02,0x02,0x04,0x04,0x08,0x08,0x10,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
           [0x00,0x00,0xC0,0x30,0x0C,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x0C,0x30,0xC0,0x00,0x00],
           [0xF8,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x04,0x04,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0],
           [0x1F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x40,0x40,0x40,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x40,0x40,0x40,0x80,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0x0F],
           [0x00,0x00,0x03,0x0C,0x30,0x40,0x80,0x00,0x00,0x00,0x04,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x80,0x40,0x30,0x0C,0x03,0x00,0x00],
           [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x02,0x04,0x08,0x08,0x10,0x10,0x20,0x20,0x40,0x40,0x40,0x40,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x40,0x40,0x40,0x40,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x02,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00]]
 
    def __init__(self):
        self.i2c_slave_id = 0x3c
        self.width = 128
        self.height = 64
        self.enable = True
        try:
            self.i2c_bus = machine.I2C(-1, sda = machine.Pin("P5"), scl = machine.Pin("P4"))
            device_list = self.i2c_bus.scan()
            if (self.i2c_slave_id in device_list):
                self.enable = True
            else:
                self.enable = False
            super().__init__(self.width, self.height, self.i2c_bus, self.i2c_slave_id, external_vcc=False)
        except Exception as e:
            print("Exception: %s" %e)
        self.init_lcd_display()

# lcd text region inital
    def init_lcd_display(self):
        try:
            self.hline(0, 3, 20, 1)
            self.hline(107, 3, 20, 1)
            self.text("KT coding", 28,0)
            self.show()
            return 0
        except Exception as e:
            print("Exception: %s" %e)
            return -1
        
        
# lcd clear (title is also cleared)
    def clear_all(self):
        try:
            self.fill(0)
            self.show()
            return 0
        except Exception as e:
            print("Exception: %s" %e)
            return -1        

# lcd clear (keep title shown)
    def clear_text(self):
        try:
            self.fill(0)
            self.init_lcd_display()
            self.show()
            return 0
        except Exception as e:
            print("Exception: %s" %e)
            return -1              

# lcd, show text in a line
    def text_line(self, text_string, line_num=1):
        if line_num < 0 or line_num >7:
            line_num = 1
        line_position = line_num * 8
        try:
            self.text(text_string,0, line_position)
            self.show()
            return 0
        except Exception as e:
            print("Exception: %s" %e)
            return -1
            
# lcd, clear a line
    def clear_line(self, line_num=1):
        if line_num < 0 or line_num >7:
            line_num = 1
        line_position = line_num * 8
        try:
            self.fill_rect(0, line_position, 128, 8, 0)
            self.show()
            return 0
        except Exception as e:
            print("Exception: %s" %e)
            return -1 
        
    def draw_face(self, face_type, start_line=1, start_col=0):
        if start_line < 0 or start_line >7:
            start_line = 1
        if start_col < 0 or start_col >127:
            start_col = 0
            
        if (face_type is 'smile'):
            face = self.smile
        elif (face_type is 'cry'):
            face = self.cry
        elif (face_type is 'normal'):
            face = self.normal
        else:
            face = self.normal
            
        for i in range(len(face)):
        	  pos = (start_line + i) * self.width + start_col
        	  for j in range(len(face[i])):
        		    self.buffer[pos+j] = face[i][j]  	

        try:
            self.show()
            return 0
        except Exception as e:
            print("Exception: %s" %e)
            return -1
